{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/nikolai/Desktop/git/frontend/recipe/src/app/components/Recipe/index.tsx"],"sourcesContent":["\nimport React from 'react';\n\n\ninterface RawMealSummary {\n  idMeal: string;\n  strMeal: string;\n  strMealAlternate: string | null;\n  strCategory: string;\n  strArea: string;\n  strMealThumb: string;\n  strTags: string | null;\n  strYoutube: string | null;\n  strSource: string | null;\n}\n\ninterface MealsResponse {\n  meals: RawMealSummary[] | null;\n}\n\nasync function fetchAllMeals(): Promise<RawMealSummary[]> {\n  const res = await fetch('http://localhost:3000/recipes', {\n    cache: 'no-store',\n  });\n  if (!res.ok) {\n    throw new Error(`Failed to fetch recipes (status ${res.status})`);\n  }\n  const data: MealsResponse = await res.json();\n  return data.meals || [];\n}\n\nexport default async function RecipeListPage() {\n  const meals = await fetchAllMeals();\n\n  return (\n    <div style={{ padding: '1rem' }}>\n      <h2>All Recipes</h2>\n\n      {meals.length === 0 ? (\n        <p>No recipes found.</p>\n      ) : (\n        <div\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            gap: '1rem',\n          }}\n        >\n          {meals.map((m) => {\n            const cardProps: RecipeCardProps = {\n              idMeal: m.idMeal,\n              strMeal: m.strMeal,\n              strMealAlternate: m.strMealAlternate,\n              strCategory: m.strCategory,\n              strArea: m.strArea,\n              strMealThumb: m.strMealThumb,\n              strTags: m.strTags,\n              strYoutube: m.strYoutube,\n              strSource: m.strSource,\n            };\n\n\n            return (\n              <div key={m.idMeal} style={{ flex: '1 1 240px', maxWidth: '275px' }}>\n                <RecipeCard {...cardProps} />\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAoBA,eAAe;IACb,MAAM,MAAM,MAAM,MAAM,iCAAiC;QACvD,OAAO;IACT;IACA,IAAI,CAAC,IAAI,EAAE,EAAE;QACX,MAAM,IAAI,MAAM,CAAC,gCAAgC,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC;IAClE;IACA,MAAM,OAAsB,MAAM,IAAI,IAAI;IAC1C,OAAO,KAAK,KAAK,IAAI,EAAE;AACzB;AAEe,eAAe;IAC5B,MAAM,QAAQ,MAAM;IAEpB,qBACE,8OAAC;QAAI,OAAO;YAAE,SAAS;QAAO;;0BAC5B,8OAAC;0BAAG;;;;;;YAEH,MAAM,MAAM,KAAK,kBAChB,8OAAC;0BAAE;;;;;qCAEH,8OAAC;gBACC,OAAO;oBACL,SAAS;oBACT,UAAU;oBACV,KAAK;gBACP;0BAEC,MAAM,GAAG,CAAC,CAAC;oBACV,MAAM,YAA6B;wBACjC,QAAQ,EAAE,MAAM;wBAChB,SAAS,EAAE,OAAO;wBAClB,kBAAkB,EAAE,gBAAgB;wBACpC,aAAa,EAAE,WAAW;wBAC1B,SAAS,EAAE,OAAO;wBAClB,cAAc,EAAE,YAAY;wBAC5B,SAAS,EAAE,OAAO;wBAClB,YAAY,EAAE,UAAU;wBACxB,WAAW,EAAE,SAAS;oBACxB;oBAGA,qBACE,8OAAC;wBAAmB,OAAO;4BAAE,MAAM;4BAAa,UAAU;wBAAQ;kCAChE,cAAA,8OAAC;4BAAY,GAAG,SAAS;;;;;;uBADjB,EAAE,MAAM;;;;;gBAItB;;;;;;;;;;;;AAKV","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///Users/nikolai/Desktop/git/frontend/recipe/src/app/recipes/layout.tsx"],"sourcesContent":["import Recipe from \"../components/Recipe\"\nexport const metadata = {\n  title: 'All Recipes',\n};\nexport default function Layout(){\n   return(\n    <div>\n<Recipe/>\n    </div>\n  \n    \n   )\n}"],"names":[],"mappings":";;;;;AAAA;;;AACO,MAAM,WAAW;IACtB,OAAO;AACT;AACe,SAAS;IACrB,qBACC,8OAAC;kBACL,cAAA,8OAAC,4IAAA,CAAA,UAAM;;;;;;;;;;AAKP","debugId":null}}]
}