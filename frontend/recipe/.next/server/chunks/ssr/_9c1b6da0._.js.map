{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["file:///Users/nikolai/Desktop/git/frontend/recipe/src/app/recipes/%5BidMeal%5D/page.tsx"],"sourcesContent":["// /app/recipes/[idMeal]/page.tsx\n\nimport React from 'react';\nimport { notFound } from 'next/navigation';\nimport Link from 'next/link';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport Divider from '@mui/material/Divider';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport Image from 'next/image';\nimport Button from '@mui/material/Button'\n\n\n\ninterface RawMeal {\n  idMeal: string;\n  strMeal: string;\n  strMealAlternate: string | null;\n  strCategory: string;\n  strArea: string;\n  strInstructions: string;\n  strMealThumb: string;\n  strTags: string | null;\n  strYoutube: string | null;\n  strSource: string | null;\n\n  strIngredient1: string;   strIngredient2: string;   strIngredient3: string;\n  strIngredient4: string;   strIngredient5: string;   strIngredient6: string;\n  strIngredient7: string;   strIngredient8: string;   strIngredient9: string;\n  strIngredient10: string;  strIngredient11: string;  strIngredient12: string;\n  strIngredient13: string;  strIngredient14: string;  strIngredient15: string;\n  strIngredient16: string;  strIngredient17: string;  strIngredient18: string;\n  strIngredient19: string;  strIngredient20: string;\n\n  strMeasure1: string;   strMeasure2: string;   strMeasure3: string;\n  strMeasure4: string;   strMeasure5: string;   strMeasure6: string;\n  strMeasure7: string;   strMeasure8: string;   strMeasure9: string;\n  strMeasure10: string;  strMeasure11: string;  strMeasure12: string;\n  strMeasure13: string;  strMeasure14: string;  strMeasure15: string;\n  strMeasure16: string;  strMeasure17: string;  strMeasure18: string;\n  strMeasure19: string;  strMeasure20: string;\n}\n\ninterface LookupResponse {\n  meals: RawMeal[] | null;\n}\n\ninterface RawMealSummary {\n  idMeal: string;\n  strMeal: string;\n  strMealThumb: string;\n  strCategory: string;\n  strArea: string;\n  strTags: string | null;\n  strYoutube: string | null;\n  strSource: string | null;\n}\n\ninterface MealsResponse {\n  meals: RawMealSummary[] | null;\n}\n\n\n\ninterface Ingredient {\n  name: string;\n  measure: string;\n}\n\ninterface Recipe {\n  id: string;\n  name: string;\n  alternateName: string | null;\n  category: string;\n  country: string;\n  instructions: string;\n  imageUrl: string;\n  youtubeUrl: string | null;\n  sourceUrl: string | null;\n  ingredients: Ingredient[];\n}\n\nfunction normalizeRawMeal(raw: RawMeal): Recipe {\n  const ingredients: Ingredient[] = [];\n  for (let i = 1; i <= 20; i++) {\n    const ingKey = (`strIngredient${i}` as keyof RawMeal);\n    const measureKey = (`strMeasure${i}` as keyof RawMeal);\n    const ingVal = raw[ingKey]?.trim();\n    const measureVal = raw[measureKey]?.trim();\n    if (ingVal && ingVal.length > 0) {\n      ingredients.push({ name: ingVal, measure: measureVal || '' });\n    }\n  }\n\n  return {\n    id: raw.idMeal,\n    name: raw.strMeal,\n    alternateName: raw.strMealAlternate,\n    category: raw.strCategory,\n    country: raw.strArea,\n    instructions: raw.strInstructions,\n    imageUrl: raw.strMealThumb,\n    youtubeUrl: raw.strYoutube,\n    sourceUrl: raw.strSource,\n    ingredients,\n  };\n}\n\n\n\nasync function fetchRecipeByIdMeal(idMeal: string): Promise<Recipe | null> {\n  const res = await fetch(`http://localhost:3000/recipes/${idMeal}`, {\n    cache: 'no-store',\n  });\n  if (!res.ok) throw new Error(`Failed to fetch recipe ${idMeal} (status ${res.status})`);\n  const data: LookupResponse = await res.json();\n  if (!data.meals || data.meals.length === 0) return null;\n  return normalizeRawMeal(data.meals[0]);\n}\n\nasync function fetchRecipesByCategory(category: string): Promise<Recipe[]> {\n\n  const listRes = await fetch(`http://localhost:3000/recipes?category=${encodeURIComponent(category)}`, {\n    cache: 'no-store',\n  });\n  if (!listRes.ok) throw new Error(`Failed to fetch list for category ${category}`);\n  const listData: MealsResponse = await listRes.json();\n  if (!listData.meals) return [];\n\n  // Then do lookup for each idMeal to get full RawMeal\n  const lookupPromises = listData.meals.map((m) =>\n    fetch(`http://localhost:3000/recipes/${m.idMeal}`, { cache: 'no-store' })\n      .then((r) => {\n        if (!r.ok) throw new Error(`Lookup failed for ${m.idMeal}`);\n        return r.json() as Promise<LookupResponse>;\n      })\n      .then((resp) => (resp.meals && resp.meals.length > 0 ? normalizeRawMeal(resp.meals[0]) : null))\n  );\n\n  const all = await Promise.all(lookupPromises);\n  return all.filter((r): r is Recipe => r !== null);\n}\n\ninterface Props {\n  params: { idMeal: string };\n}\n\nexport default async function RecipeInfoPage({ params }: Props) {\n  const { idMeal } = params;\n  const recipe = await fetchRecipeByIdMeal(idMeal);\n\n  if (!recipe) {\n \n    notFound();\n  }\n\n  const related = await fetchRecipesByCategory(recipe.category);\n\n  return (\n<>\n123\n</>\n  );\n}\n"],"names":[],"mappings":"AAAA,iCAAiC;;;;;AAGjC;AAAA;;;AAoFA,SAAS,iBAAiB,GAAY;IACpC,MAAM,cAA4B,EAAE;IACpC,IAAK,IAAI,IAAI,GAAG,KAAK,IAAI,IAAK;QAC5B,MAAM,SAAU,CAAC,aAAa,EAAE,GAAG;QACnC,MAAM,aAAc,CAAC,UAAU,EAAE,GAAG;QACpC,MAAM,SAAS,GAAG,CAAC,OAAO,EAAE;QAC5B,MAAM,aAAa,GAAG,CAAC,WAAW,EAAE;QACpC,IAAI,UAAU,OAAO,MAAM,GAAG,GAAG;YAC/B,YAAY,IAAI,CAAC;gBAAE,MAAM;gBAAQ,SAAS,cAAc;YAAG;QAC7D;IACF;IAEA,OAAO;QACL,IAAI,IAAI,MAAM;QACd,MAAM,IAAI,OAAO;QACjB,eAAe,IAAI,gBAAgB;QACnC,UAAU,IAAI,WAAW;QACzB,SAAS,IAAI,OAAO;QACpB,cAAc,IAAI,eAAe;QACjC,UAAU,IAAI,YAAY;QAC1B,YAAY,IAAI,UAAU;QAC1B,WAAW,IAAI,SAAS;QACxB;IACF;AACF;AAIA,eAAe,oBAAoB,MAAc;IAC/C,MAAM,MAAM,MAAM,MAAM,CAAC,8BAA8B,EAAE,QAAQ,EAAE;QACjE,OAAO;IACT;IACA,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,OAAO,SAAS,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC;IACtF,MAAM,OAAuB,MAAM,IAAI,IAAI;IAC3C,IAAI,CAAC,KAAK,KAAK,IAAI,KAAK,KAAK,CAAC,MAAM,KAAK,GAAG,OAAO;IACnD,OAAO,iBAAiB,KAAK,KAAK,CAAC,EAAE;AACvC;AAEA,eAAe,uBAAuB,QAAgB;IAEpD,MAAM,UAAU,MAAM,MAAM,CAAC,uCAAuC,EAAE,mBAAmB,WAAW,EAAE;QACpG,OAAO;IACT;IACA,IAAI,CAAC,QAAQ,EAAE,EAAE,MAAM,IAAI,MAAM,CAAC,kCAAkC,EAAE,UAAU;IAChF,MAAM,WAA0B,MAAM,QAAQ,IAAI;IAClD,IAAI,CAAC,SAAS,KAAK,EAAE,OAAO,EAAE;IAE9B,qDAAqD;IACrD,MAAM,iBAAiB,SAAS,KAAK,CAAC,GAAG,CAAC,CAAC,IACzC,MAAM,CAAC,8BAA8B,EAAE,EAAE,MAAM,EAAE,EAAE;YAAE,OAAO;QAAW,GACpE,IAAI,CAAC,CAAC;YACL,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,EAAE,MAAM,EAAE;YAC1D,OAAO,EAAE,IAAI;QACf,GACC,IAAI,CAAC,CAAC,OAAU,KAAK,KAAK,IAAI,KAAK,KAAK,CAAC,MAAM,GAAG,IAAI,iBAAiB,KAAK,KAAK,CAAC,EAAE,IAAI;IAG7F,MAAM,MAAM,MAAM,QAAQ,GAAG,CAAC;IAC9B,OAAO,IAAI,MAAM,CAAC,CAAC,IAAmB,MAAM;AAC9C;AAMe,eAAe,eAAe,EAAE,MAAM,EAAS;IAC5D,MAAM,EAAE,MAAM,EAAE,GAAG;IACnB,MAAM,SAAS,MAAM,oBAAoB;IAEzC,IAAI,CAAC,QAAQ;QAEX,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IACT;IAEA,MAAM,UAAU,MAAM,uBAAuB,OAAO,QAAQ;IAE5D,qBACF;kBAAE;;AAIF","debugId":null}}]
}